import os
import sys
import asyncio
import logging
import dotenv
import tempfile
import argparse
import time
from src.video_processor import VideoProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("test.log")
    ]
)

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()

# –ü—Ä–æ–∫—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Render
DEFAULT_PROXY = "194.226.4.30:63825:MkBea3Vy:P6S5C8zd"

async def test_youtube_transcript(youtube_url, proxy=None, timeout=30):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ YouTube –≤–∏–¥–µ–æ.
    
    Args:
        youtube_url (str): URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        proxy (str, optional): –ü—Ä–æ–∫—Å–∏ –¥–ª—è YouTube API
        timeout (int, optional): –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è URL: {youtube_url}")
    
    start_time = time.time()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = VideoProcessor(proxy=proxy, timeout=timeout)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YouTube
        result = await processor.process_youtube_url(youtube_url)
        
        # –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        elapsed_time = time.time() - start_time
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*50)
        print(f"üé¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø: {youtube_url}")
        print("="*50)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        print(f"\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {result.get('video_title', '–ù/–î')}")
        print(f"üìå ID –≤–∏–¥–µ–æ: {result.get('video_id', '–ù/–î')}")
        
        # –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        transcript = result.get('transcript', '')
        print("\nüìÑ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-"*50)
        print(transcript[:500] + "..." if len(transcript) > 500 else transcript)
        print("-"*50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        transcript_len = len(transcript)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"- –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        return True
        
    except Exception as e:
        # –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        elapsed_time = time.time() - start_time
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e} (–∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥)")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        print(f"- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ –æ—à–∏–±–∫–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        return False

async def test_proxy_settings(youtube_url, proxy, timeout=30):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    Args:
        youtube_url (str): URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        proxy (str): –ü—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        timeout (int): –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    print("\n" + "="*80)
    print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò: {proxy or '–ë–µ–∑ –ø—Ä–æ–∫—Å–∏'} (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)")
    print("="*80)
    
    success = await test_youtube_transcript(youtube_url, proxy, timeout)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
    
    return success

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ')
    parser.add_argument('--youtube', help='URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--proxy', help='–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube API (host:port:username:password)')
    parser.add_argument('--no-proxy', action='store_true', help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ (–¥–∞–∂–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--timeout', type=int, default=30, help='–¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--test-all', action='store_true', help='–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å –ø—Ä–æ–∫—Å–∏ –∏ –±–µ–∑)')
    args = parser.parse_args()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    youtube_url = args.youtube or "https://www.youtube.com/watch?v=UQYV8--TZqI"
    timeout = args.timeout
    
    if args.test_all:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        print("\nüß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (—Å –ø—Ä–æ–∫—Å–∏ –∏ –±–µ–∑)")
        
        # –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        success_no_proxy = await test_proxy_settings(youtube_url, None, timeout)
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        success_with_proxy = await test_proxy_settings(youtube_url, DEFAULT_PROXY, timeout)
        
        # –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        success_custom_proxy = True
        if args.proxy and args.proxy != DEFAULT_PROXY:
            success_custom_proxy = await test_proxy_settings(youtube_url, args.proxy, timeout)
        
        # –í—ã–≤–æ–¥ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*80)
        print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úì –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {'–£—Å–ø–µ—à–Ω–æ ‚úÖ' if success_no_proxy else '–û—à–∏–±–∫–∞ ‚ùå'}")
        print(f"‚úì –° –ø—Ä–æ–∫—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'–£—Å–ø–µ—à–Ω–æ ‚úÖ' if success_with_proxy else '–û—à–∏–±–∫–∞ ‚ùå'}")
        if args.proxy and args.proxy != DEFAULT_PROXY:
            print(f"‚úì –° —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–∫—Å–∏: {'–£—Å–ø–µ—à–Ω–æ ‚úÖ' if success_custom_proxy else '–û—à–∏–±–∫–∞ ‚ùå'}")
        print("="*80)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        if success_no_proxy or success_with_proxy or (args.proxy and success_custom_proxy):
            print("\n‚úÖ –ö–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("\n‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.")
            sys.exit(1)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        proxy = None
        if not args.no_proxy:
            proxy = args.proxy or DEFAULT_PROXY
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        print(f"–¢–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫—É–Ω–¥")
        if proxy:
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy}")
        else:
            print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º YouTube URL
        success = await test_youtube_transcript(youtube_url, proxy, timeout)
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
            sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 