import os
import sys
import asyncio
import logging
import dotenv
import tempfile
import argparse
from src.video_processor import VideoProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("test.log")
    ]
)

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()

async def test_youtube_transcript(youtube_url, proxy=None):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ YouTube –≤–∏–¥–µ–æ.
    
    Args:
        youtube_url (str): URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        proxy (str, optional): –ü—Ä–æ–∫—Å–∏ –¥–ª—è YouTube API
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è URL: {youtube_url}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = VideoProcessor(proxy=proxy)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YouTube
        result = await processor.process_youtube_url(youtube_url)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*50)
        print(f"üé¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø: {youtube_url}")
        print("="*50)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        print(f"\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {result.get('video_title', '–ù/–î')}")
        print(f"üìå ID –≤–∏–¥–µ–æ: {result.get('video_id', '–ù/–î')}")
        
        # –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        transcript = result.get('transcript', '')
        print("\nüìÑ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-"*50)
        print(transcript[:500] + "..." if len(transcript) > 500 else transcript)
        print("-"*50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        transcript_len = len(transcript)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"- –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_len} —Å–∏–º–≤–æ–ª–æ–≤")
        
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        return False

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ')
    parser.add_argument('--youtube', help='URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--proxy', help='–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube API (http://user:pass@host:port)')
    args = parser.parse_args()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    youtube_url = args.youtube or "https://www.youtube.com/watch?v=UQYV8--TZqI"
    proxy = args.proxy
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    if proxy:
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º YouTube URL
    success = await test_youtube_transcript(youtube_url, proxy)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 