import os
import sys
import asyncio
import logging
import dotenv
import tempfile
import subprocess
import argparse
from src.video_processor import VideoProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("test.log")
    ]
)

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ OpenAI
openai_api_key = os.getenv('OPENAI_API_KEY')

if not openai_api_key:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

async def download_test_video(youtube_url, output_path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å YouTube.
    
    Args:
        youtube_url (str): URL YouTube –≤–∏–¥–µ–æ
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
    
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ {youtube_url}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp
        proc = await asyncio.create_subprocess_exec(
            "yt-dlp", 
            "-f", "best[height<=480]",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            "-o", output_path,
            youtube_url,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await proc.communicate()
        
        if proc.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {stderr.decode()}")
            return False
        
        logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –≤ {output_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

async def test_youtube_summary(youtube_url):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ YouTube –≤–∏–¥–µ–æ.
    
    Args:
        youtube_url (str): URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è URL: {youtube_url}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ
        processor = VideoProcessor(openai_api_key=openai_api_key)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube URL
        result = await processor.process_youtube_url(youtube_url)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*50)
        print(f"üé¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø: {youtube_url}")
        print("="*50)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        print(f"\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {result.get('video_title', '–ù/–î')}")
        print(f"üìå ID –≤–∏–¥–µ–æ: {result.get('video_id', '–ù/–î')}")
        
        # –í—ã–≤–æ–¥ —Å–∞–º–º–∞—Ä–∏
        print("\nüìù –°–ê–ú–ú–ê–†–ò:")
        print("-"*50)
        print(result.get('summary', '–°–∞–º–º–∞—Ä–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'))
        print("-"*50)
        
        # –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        transcript = result.get('transcript', '')
        print("\nüìÑ –ß–ê–°–¢–¨ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-"*50)
        print(transcript[:500] + "..." if len(transcript) > 500 else transcript)
        print("-"*50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_len = len(result.get('summary', ''))
        transcript_len = len(transcript)
        compression_ratio = round((summary_len / transcript_len) * 100, 2) if transcript_len > 0 else 0
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"- –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"- –î–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏: {summary_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio}%")
        
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        return False

async def test_video_file(video_path):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {video_path}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ
        processor = VideoProcessor(openai_api_key=openai_api_key)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        result = await processor.process_video_file(video_path)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*50)
        print(f"üé¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –í–ò–î–ï–û: {os.path.basename(video_path)}")
        print("="*50)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        print(f"\nüìå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration', 0):.2f} —Å–µ–∫—É–Ω–¥")
        
        # –í—ã–≤–æ–¥ —Å–∞–º–º–∞—Ä–∏
        print("\nüìù –°–ê–ú–ú–ê–†–ò:")
        print("-"*50)
        print(result.get('summary', '–°–∞–º–º–∞—Ä–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'))
        print("-"*50)
        
        # –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        transcript = result.get('transcript', '')
        print("\nüìÑ –ß–ê–°–¢–¨ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-"*50)
        print(transcript[:500] + "..." if len(transcript) > 500 else transcript)
        print("-"*50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_len = len(result.get('summary', ''))
        transcript_len = len(transcript)
        compression_ratio = round((summary_len / transcript_len) * 100, 2) if transcript_len > 0 else 0
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"- –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"- –î–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏: {summary_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio}%")
        
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        return False

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ')
    parser.add_argument('--youtube', help='URL YouTube –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--file', help='–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É')
    parser.add_argument('--download', action='store_true', help='–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å YouTube –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    args = parser.parse_args()
    
    success = False
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    youtube_url = args.youtube or "https://www.youtube.com/watch?v=UQYV8--TZqI"
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —Å–∫–∞—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if args.download:
        with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_file:
            video_path = tmp_file.name
        
        download_success = await download_test_video(youtube_url, video_path)
        
        if download_success:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                success = await test_video_file(video_path)
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(video_path)
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ.")
            success = False
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ
    elif args.file:
        if not os.path.exists(args.file):
            print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
            success = False
        else:
            success = await test_video_file(args.file)
    
    # –ò–Ω–∞—á–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º YouTube URL
    else:
        success = await test_youtube_summary(youtube_url)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 