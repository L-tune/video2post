import os
import logging
import re
import asyncio
import tempfile
from typing import List, Dict, Any, Optional, Union
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

from src.youtube_subtitles import YouTubeSubtitlesExtractor
from src.video_processor import VideoProcessor

logger = logging.getLogger(__name__)

YOUTUBE_URL_PATTERN = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API."""
    
    def __init__(self, config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.
        
        Args:
            config (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        """
        self.config = config
        self.bot_token = config.get('TELEGRAM_BOT_TOKEN')
        self.openai_api_key = config.get('OPENAI_API_KEY')
        self.authorized_user_ids = [int(uid) for uid in config.get('AUTHORIZED_USER_IDS', '').split(',') if uid]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.temp_folder = tempfile.mkdtemp()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_folder}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
        self.video_processor = VideoProcessor(openai_api_key=self.openai_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫
        self.youtube_extractor = YouTubeSubtitlesExtractor()
        
        logger.info("TelegramBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            application = Application.builder().token(self.bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.cmd_start))
            application.add_handler(CommandHandler("help", self.cmd_help))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
            application.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, self.handle_video))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            application.add_handler(MessageHandler(
                filters.Document.MimeType("video/mp4") | 
                filters.Document.MimeType("video/quicktime") | 
                filters.Document.MimeType("video/x-matroska") | 
                filters.Document.MimeType("video/webm"), 
                self.handle_video_document
            ))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await application.initialize()
            await application.start()
            await application.updater.start_polling()
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            self.is_running = True
            while self.is_running:
                await asyncio.sleep(1)
                
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        self.is_running = False
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞")
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        if not self._is_user_authorized(update):
            return
        
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n\n"
            "üì§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.\n\n"
            "üîç –î–ª—è YouTube –≤–∏–¥–µ–æ —è –∏—Å–ø–æ–ª—å–∑—É—é —Å—É–±—Ç–∏—Ç—Ä—ã, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É.\n\n"
            "‚ö°Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help"
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        if not self._is_user_authorized(update):
            return
        
        await update.message.reply_text(
            "üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É\n"
            "2. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ - –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∫–∞–∫ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
            "- –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë\n"
            "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ\n"
            "- –î–ª—è YouTube –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—É–±—Ç–∏—Ç—Ä—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YouTube URL."""
        if not self._is_user_authorized(update):
            return
        
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ YouTube —Å—Å—ã–ª–∫–∞
        youtube_match = re.search(YOUTUBE_URL_PATTERN, message_text)
        if youtube_match:
            youtube_url = youtube_match.group(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await update.message.reply_text(f"üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É YouTube –≤–∏–¥–µ–æ: {youtube_url}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º YouTube —Å—Å—ã–ª–∫—É
                result = await self.video_processor.process_youtube_url(youtube_url)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self._send_video_summary(update, result)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube URL: {e}")
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å YouTube –≤–∏–¥–µ–æ: {str(e)}")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –≤–∏–¥–µ–æ."""
        if not self._is_user_authorized(update):
            return
        
        await update.message.reply_text("üé¨ –ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            video_file = await update.message.video.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_file:
                video_path = tmp_file.name
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await video_file.download_to_drive(video_path)
            logger.info(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ {video_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.video_processor.process_video_file(video_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_video_summary(update, result)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(video_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {str(e)}")
    
    async def handle_video_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
        if not self._is_user_authorized(update):
            return
        
        await update.message.reply_text("üé¨ –ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            video_file = await update.message.document.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_file:
                video_path = tmp_file.name
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await video_file.download_to_drive(video_path)
            logger.info(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ {video_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.video_processor.process_video_file(video_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_video_summary(update, result)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(video_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _send_video_summary(self, update: Update, result: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ.
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            result (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        """
        summary = result.get("summary", "")
        transcript = result.get("transcript", "")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
        await update.message.reply_text(f"üìù –í–æ—Ç —Å–∞–º–º–∞—Ä–∏ –≤–∏–¥–µ–æ:\n\n{summary}")
        
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —á–∞—Å—Ç—è–º–∏
        if len(transcript) > 4000:
            parts = [transcript[i:i+4000] for i in range(0, len(transcript), 4000)]
            for i, part in enumerate(parts):
                await update.message.reply_text(f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
        else:
            await update.message.reply_text(f"üìÑ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n{transcript}")
    
    def _is_user_authorized(self, update: Update) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            
        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False
        """
        user_id = update.effective_user.id
        if not self.authorized_user_ids or user_id in self.authorized_user_ids:
            return True
        
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return False 