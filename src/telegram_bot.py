import os
import logging
import re
import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from .download_manager import DownloadManager
from .transcription import WhisperTranscriber
from .content_generator import ContentGenerator

logger = logging.getLogger(__name__)

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
YOUTUBE_URL_PATTERN = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'

class TelegramBot:
    """–ö–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, token, openai_api_key, claude_api_key=None, temp_folder="temp", output_folder="output"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            openai_api_key (str): API –∫–ª—é—á OpenAI
            claude_api_key (str, optional): API –∫–ª—é—á Claude
            temp_folder (str): –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            output_folder (str): –ü–∞–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        self.token = token
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–ª—é—á OpenAI API: {openai_api_key[:10]}...")
        self.openai_api_key = openai_api_key
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ Claude, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        use_claude = False
        if claude_api_key:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–ª—é—á Claude API: {claude_api_key[:10]}...")
            use_claude = True
        self.claude_api_key = claude_api_key
        
        self.temp_folder = temp_folder
        self.output_folder = output_folder
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        os.makedirs(temp_folder, exist_ok=True)
        os.makedirs(output_folder, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.download_manager = DownloadManager(temp_folder)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ OpenAI –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
        if not openai_api_key or openai_api_key == "OPENAI_API_KEY":
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á OpenAI API")
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á OpenAI API")
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞ —Å –∫–ª—é—á–æ–º OpenAI: {openai_api_key[:10]}...")    
        self.transcriber = WhisperTranscriber(openai_api_key)
        
        if use_claude:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å Claude API")
            self.content_generator = ContentGenerator(
                api_key=openai_api_key,
                use_claude=True,
                claude_api_key=claude_api_key
            )
        else:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å OpenAI API")
            self.content_generator = ContentGenerator(
                api_key=openai_api_key,
                use_claude=False
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, self.process_video))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª, –∏ —è —Å–æ–∑–¥–∞–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 20 –ú–ë) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ)\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "- –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã: MP4, MOV, AVI\n"
            "- YouTube: –ª—é–±—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )
    
    async def process_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            message = await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if update.message.video:
                file = await update.message.video.get_file()
            else:
                file = await update.message.document.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            await message.edit_text("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            video_path = await self.download_manager.download_file(file)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ
            await message.edit_text("–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —Ä–µ—á—å –∏–∑ –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            transcription = await self.transcriber.transcribe(video_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            await message.edit_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...")
            post_content = await self.content_generator.generate_post(transcription)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await message.edit_text("–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –ø–æ—Å—Ç:")
            await update.message.reply_text(post_content)
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            os.remove(video_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    
    async def echo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube
        youtube_match = re.search(YOUTUBE_URL_PATTERN, message_text)
        if youtube_match:
            youtube_url = youtube_match.group(0)
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ YouTube —Å—Å—ã–ª–∫–∞: {youtube_url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–µ–æ ID
            video_id = youtube_match.group(6)
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID –≤–∏–¥–µ–æ: {video_id}")
            
            # –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            clean_url = f"https://www.youtube.com/watch?v={video_id}"
            logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π URL: {clean_url}")
            
            message = await update.message.reply_text(f"üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É YouTube –≤–∏–¥–µ–æ: {clean_url}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                from .video_processor import VideoProcessor
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä VideoProcessor —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–ª—é—á–∞ API
                video_processor = VideoProcessor(
                    temp_folder=self.temp_folder,
                    openai_api_key=self.openai_api_key
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º YouTube URL
                await message.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
                video_data = await video_processor.process_youtube_url(clean_url)
                
                transcription = video_data.get('transcription')
                
                # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
                if transcription:
                    await message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
                    post_content = await self.content_generator.generate_post(transcription)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    await message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –ø–æ—Å—Ç:")
                    await update.message.reply_text(post_content)
                else:
                    await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube URL: {e}", exc_info=True)
                await message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å YouTube –≤–∏–¥–µ–æ: {str(e)}")
                
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
            )
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.Event().wait()
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            await self.application.stop()
            await self.application.shutdown() 